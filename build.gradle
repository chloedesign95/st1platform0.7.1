plugins {
    id 'org.springframework.boot' version '2.7.0' //스프링부트버전
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.st1'
version = 'v1.1'
sourceCompatibility = '17' //자바버전

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //Springdoc-openapi (Swagger) -- Spring Initializr에 없음
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.12'
    //Spring Boot Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //Rest Repositories
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    //Rest Repositories HAL Explorer
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    //Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //OAuth2 Client
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    //Thymeleaf Extras Springsecurity5 --  Spring Initializr에 없음  (Maven)
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    //H2 Database
    runtimeOnly 'com.h2database:h2'
    //MariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    //PostgreSQL Driver
    runtimeOnly 'org.postgresql:postgresql'
    //Spring Boot DevTools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //Spring Configuration Processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    //therapi-runtime-javadoc-scribe --  Spring Initializr에 없음
    annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0'
    //Starter Test (자동입력됨.)
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // queryDSL 설정
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
}

tasks.named('test') {
    useJUnitPlatform()
}


// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

// Heroku 설정
jar {
    manifest {
        attributes('Main-Class': 'com.st1.platform.St1PlatformApplication')
    }
}
